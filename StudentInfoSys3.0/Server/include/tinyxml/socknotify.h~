#ifndef _SOCKNOTIFY_H__
#define _SOCKNOTIFY_H__
#include <cstring>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <inttypes.h>
#include <iostream>

using namespace std;
enum {HTON=0,NTOH};

template<typename T>
void field_hton(T& field){
    int n = sizeof(field);
    switch(n){
        case 2:
            field = htons(field);break;
        case 4:
            field = htonl(field);break;
        case 8:
            field = htonll(field);break;
        default:break;
    }
}

template<typename T>
void field_ntoh(T& field){
    int n = sizeof(field);
    switch(n){
        case 2:
            field = ntohs(field);break;
        case 4:
            field = ntohl(field);break;
        case 8:
            field = ntohll(field);break;
        default:break;
    }
}


class CNotify
{
    public:
    enum
    {
        //NOTIFY_LEN = 12,
        RESERVE_LEN = 16,
        DATAOFF_LEN = 4
    };

public:
    CNotify():m_nType(0),m_nLen(0),m_nBlock(0),m_nSize(0),m_pData(NULL)
    {
        resize(0);
    }
    CNotify(int nType, int nLen, int nBlock = 0)
    {
        m_nType  = nType;
        m_nLen   = nLen;
        m_nBlock = nBlock;
        m_nSize  = nLen;
        m_pData  = NULL;
        resize(nLen);
    }
    CNotify(const CNotify& cNotify)
    {
        m_nType = cNotify.m_nType;
        m_nLen  = cNotify.m_nLen;
        m_nBlock = cNotify.m_nBlock;
        resize(m_nLen);
        memcpy(m_pData,cNotify.m_pData,m_nLen);
    }
    CNotify& operator=(const CNotify& cNotify)
    {
        if(&cNotify == this)
        {
            return *this;
        }
        m_nType  = cNotify.m_nType;
        m_nLen   = cNotify.m_nLen;
        m_nBlock = cNotify.m_nBlock;
        resize(m_nLen);
        memcpy(m_pData, cNotify.m_pData, m_nLen);
        return *this;
    }
    ~CNotify()
    {
        if( m_pData != NULL )
        {
            delete[] m_pData;
        }
        m_pData = NULL;
    }

public:
    void set_type(int nType)
    {
        m_nType = nType;
    }
    int get_type()
    {
        return m_nType;
    }
    int get_len()
    {
        return m_nLen < 0 ? 0 : m_nLen;
    }
	int get_size(){
		return m_nSize;	
	}
    int is_block()
    {
        return m_nBlock;
    }
    int resize(int nLen)
    {
		cout << "resize " << nLen << endl;
		if(nLen <=0) return -1;
        int nSize = nLen + RESERVE_LEN;
        if( m_nSize <= nSize )
        {
            if( m_pData != NULL )
            {
                delete[] m_pData;
            }
            m_nLen = nLen;
            m_nSize = nSize;
            m_pData = new char[m_nSize];
        }
        m_nLen = nLen;
        return nLen;
    }
    void set_data(const char* pData, int nLen)
    {
        resize(nLen);
        memcpy(m_pData+RESERVE_LEN,pData,m_nLen);
    }
    void set_data(char* pData,int nLen)
    {
        resize(nLen);
        memcpy(m_pData+RESERVE_LEN,pData,m_nLen);
    }

    template<class TYPE>
    void set_data(TYPE& data)
    {
        resize(sizeof(TYPE));
        data.serialize(HTON);
        memcpy(m_pData+RESERVE_LEN, &data, m_nLen);
    }

    void set_data(int32 iValue)
    {
        resize(sizeof(iValue));
        iValue = htonl(iValue);
        memcpy(m_pData+RESERVE_LEN,&iValue,m_nLen);
    }
    char* get_data()
    {
        return m_pData + RESERVE_LEN;
    }

    template<class TYPE>
    char* get_data(TYPE* p)
    {
        TYPE* pType = (TYPE*)(m_pData+RESERVE_LEN);
        pType->serialize(NTOH);
        return m_pData + RESERVE_LEN;
    }

    char* get_data(int32 iValue)
    {
        int32* pValue = (int32*)(m_pData + RESERVE_LEN);
        *pValue = ntohl(*pValue);
        return m_pData+RESERVE_LEN;
    }
    char* get_head()
    {
        return m_pData;
    }

    int set_head()
    {
        int* pValue = (int*)(m_pData);
        m_nType = htonl(*pValue);

        ++pValue;
        m_nLen = htonl(*pValue);

        ++pValue;
        m_nBlock = htonl(*pValue);

        return m_nLen;
    }

    char* get_recv()
    {
        resize(m_nLen);
        return m_pData + RESERVE_LEN;
    }

    char* get_send()
    {
        int* pValue = (int*)(m_pData);
        *pValue = ntohl(m_nType);
        ++pValue;
        *pValue = ntohl(m_nLen);
        ++pValue;
        *pValue = ntohl(m_nBlock);
        ++pValue;
        *pValue = ntohl(m_nSize);
        return m_pData;
    }

    void n2h()
    {
        m_nType  = ntohl(m_nType);
        m_nLen   = ntohl(m_nLen);
        m_nBlock = ntohl(m_nBlock);
        m_nSize  = ntohl(m_nSize);
    }
    void h2n()
    {
        m_nType  = htonl(m_nType);
        m_nLen   = htonl(m_nLen);
        m_nBlock = htonl(m_nBlock);
        m_nSize  = htonl(m_nSize);
    }
    void ntoh()
    {
        m_nType  = ntohl(m_nType);
        m_nLen   = ntohl(m_nLen);
        m_nBlock = ntohl(m_nBlock);
        m_nSize  = ntohl(m_nSize);
    }
    void hton()
    {
        m_nType  = htonl(m_nType);
        m_nLen   = htonl(m_nLen);
        m_nBlock = htonl(m_nBlock);
        m_nSize  = htonl(m_nSize);
    }

private:
    int   m_nType;
    int   m_nLen;
    int   m_nBlock;
    int   m_nSize;
    char* m_pData;
};

#define BEGIN_SOCK_SERIALIZE  \
    void serialize(int flag){ \
        
#define END_SOCK_SERIALIZE \
    }

#define SOCK_FIELD_SERIALIZE(field)  \
    switch(flag) \
    { \
        case 0: \
        { \
            field_hton(field); \
            break;  \
        } \
        case 1: \
        { \
            field_ntoh(field); \
            break; \
        } \
        default: \
        { \
            break; \
        } \
    }
#define SOCK_ARRAY_SERIALIZE(array,iNum) \
    switch(flag) \
    { \
        case 0: \
        { \
            for(int32 iCount = 0; iCount < iNum; iCount++) \
            { \
                field_hton(array[iCount]); \
            } \
            break; \
        } \
        case 1: \
        { \
            for(int32 iCount = 0; iCount < iNum; iCount++) \
            { \
                field_ntoh(array[iCount]); \
            } \
            break; \
        } \
        default: \
        { \
            break; \
        } \
    }

#endif //_SOCKNOTIFY_H__
